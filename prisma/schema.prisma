// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model PollGroup {
    id        String   @id @default(cuid())
    key       String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    polls     Poll[]
    users     User[]   @relation("member")
    creator   User     @relation(fields: [creatorId], references: [id])
    creatorId String
}

model Poll {
    id          String       @id @default(cuid())
    title       String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    authorId    String
    author      User         @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    pollGroupId String
    pollGroup   PollGroup    @relation(fields: [pollGroupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    choices     PollChoice[]
}

model PollChoice {
    id        String   @id @default(cuid())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    pollId    String
    poll      Poll     @relation(fields: [pollId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    pollVotes User[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int? // needed for github
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String       @id @default(cuid())
    name              String?
    email             String?      @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    pollGroups        PollGroup[]  @relation("member")
    createdPollGroups PollGroup[]
    createdPolls      Poll[]
    votes             PollChoice[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
