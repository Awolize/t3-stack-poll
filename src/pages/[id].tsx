import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import { useRouter } from "next/router";
import React, { useState } from "react";
import Link from "next/link";
import Poll from "./components/Poll";
import CreatePoll from "./components/CreatePoll";

const PollHome: NextPage = () => {
  const router = useRouter();
  const key = router.asPath.substring(1);

  const pollsByGroup = trpc.authPoll.getPollsByGroupKey.useQuery({
    key: key,
  });
  return (
    <>
      <Head>
        <title>Poll Feed</title>
        <meta name="description" content="Tech stack generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen flex-col text-slate-500 sm:flex-row">
        <div className="basis-1/6 p-2 ">
          <p className="text-purple-300 opacity-50">Room key: {key}</p>
        </div>
        <div className="basis-4/6 p-2 ">
          <Feed key={key} />
        </div>
        <div className="basis-1/6  ">
          <Settings />
        </div>
      </div>
    </>
  );
};

export default PollHome;

const Feed: React.FC = () => {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const key = router.asPath.substring(1);
  const { data, isLoading, isError } = trpc.authPoll.getPollsByGroupKey.useQuery({
    key: key,
  });

  const [show, setShow] = useState(false);

  return (
    <div className="flex flex-col gap-6 text-white sm:px-[20%]">
      <Link href="/" className="text-center text-3xl font-bold text-purple-300">
        Feed
      </Link>
      <div>
        <button className="underline" onClick={() => setShow((prev) => !prev)}>
          {show ? "Hide create new poll" : "Create a new poll"}
        </button>
        {show && <CreatePoll />}
      </div>

      {/*           
      const disableChoices = poll.choices.some((choice) =>
            choice.pollVotes.some((user) => user.id === sessionData?.user?.id),
          ); */}

      <div className="flex flex-col gap-12 ">
        {data?.polls.map((poll) => (
          <Poll key={poll.id} pollId={poll.id} />
        ))}
      </div>
    </div>
  );
};

export const Settings: React.FC = (): JSX.Element => {
  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-row justify-end gap-4 p-2">
      <button
        onClick={sessionData ? () => signOut() : () => signIn()}
        className="h-17 w-17 flex items-center justify-center rounded-md  border border-black bg-violet-800   p-2 text-center  text-sm text-white shadow-lg hover:bg-violet-900 "
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
      <button className="flex h-16 w-16 items-center justify-center border border-gray-800  text-center text-slate-500 ">
        Profile
      </button>
    </div>
  );
};
