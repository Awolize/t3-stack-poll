import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { Poll, PollChoice } from "@prisma/client";
import { useRouter } from "next/router";
import { ChangeEvent, MouseEventHandler } from "react";

const PollHome: NextPage = () => {
  const router = useRouter();
  const key = router.asPath.substring(1);

  const { data, isLoading, isError } = trpc.poll.getPollsByGroupKey.useQuery({
    key: key,
  });
  return (
    <>
      <Head>
        <title>Poll Feed</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="divide flex h-screen flex-row divide-x divide-slate-500 text-slate-500">
        <div className="basis-1/6 p-2 ">
          <p>Room key: {data?.key}</p>
        </div>
        <div className="basis-4/6 p-2 ">
          <Feed key={key} />
        </div>
        <div className="basis-1/6 p-2 ">
          <Settings />
        </div>
      </div>
    </>
  );
};

export default PollHome;

const Feed: React.FC = () => {
  const { data: sessionData } = useSession();
  const ctx = trpc.useContext();
  const router = useRouter();
  const key = router.asPath.substring(1);
  const { data, isLoading, isError } = trpc.poll.getPollsByGroupKey.useQuery({
    key: key,
  });

  const mutateCastVote = trpc.poll.pollVote.useMutation({
    onSuccess: (input) => {
      console.log("pollVote:", input);
      ctx.poll.getAllPollGroups.invalidate();
    },
  });

  //   const mutateCreateChoice = trpc.poll.pollVote.useMutation({
  //     onSuccess: (input) => {
  //       console.log("pollVote:", input);
  //       ctx.poll.getAllPollGroups.invalidate();
  //     },
  //   });

  const mutateCreatePoll = trpc.poll.createPoll.useMutation({
    onSuccess: (input) => {
      console.log(input);

      ctx.poll.getAllPollGroups.invalidate();
    },
  });

  const handleCreatePoll = async (e: React.SyntheticEvent) => {
    e.preventDefault();
    const target = e.target as typeof e.target & {
      title: { value: string };
      option1: { value: string };
      option2: { value: string };
      option3: { value: string };
    };

    console.log("handleCreatePoll");

    console.log(target.title.value);
    console.log(target.option1.value);
    console.log(target.option2.value);
    console.log(target.option3.value);

    const choices = [
      target.option1.value,
      target.option2.value,
      target.option3.value,
    ];

    // const hello = mutateCreateChoice.mutateAsync(target.option1.value);
    // mutateChoice(target.option1.value);
    // mutateChoice(target.option1.value);

    mutateCreatePoll.mutate({
      title: target.title.value,
      choices: choices,
      pollGroupId: key,
    });
  };

  const handleCheckBoxClick = (choice: PollChoice, value: boolean) => {
    console.log("handleCheckBoxClick");

    console.log(choice);
    console.log(value);

    mutateCastVote.mutate({ choiceId: choice.id, checked: value });
  };

  return (
    <div className="flex flex-col gap-6">
      <div>Feed</div>
      <div>
        <form onSubmit={handleCreatePoll} className="flex flex-col">
          <input
            className=""
            placeholder="Type your title"
            type="text"
            name="title"
          />
          <input
            className=""
            placeholder="Type a choice"
            type="text"
            name="option1"
          />
          <input
            className=""
            placeholder="Type a choice"
            type="text"
            name="option2"
          />
          <input
            className=""
            placeholder="Type a choice"
            type="text"
            name="option3"
          />
          <button type="submit">Add new Poll</button>
        </form>
      </div>
      {data &&
        data.polls.map((poll) => {
          const disableChoices = poll.choices.some((choice) =>
            choice.pollVotes.some((user) => user.id === sessionData?.user?.id),
          );

          return (
            <div className="flex justify-center" key={poll.id}>
              <ul key={poll.id}>
                {poll.title}
                {poll.choices.map((choice, index) => (
                  <li key={choice.id}>
                    <ul className="flex flex-row gap-6">
                      <li>{index + 1}.</li> <li>{choice.title}</li>
                      <li>
                        <label>
                          <input
                            onClick={(e: React.SyntheticEvent) => {
                              const target = e.target as typeof e.target & {
                                checked: boolean;
                              };

                              handleCheckBoxClick(choice, target.checked);
                            }}
                            disabled={disableChoices}
                            type="checkbox"
                            name="checkbox"
                            checked={choice.pollVotes.some(
                              (user) => user.id === sessionData?.user?.id,
                            )}
                          />
                        </label>
                      </li>
                    </ul>
                  </li>
                ))}
              </ul>
            </div>
          );
        })}
    </div>
  );
};

const Settings: React.FC = () => {
  return (
    <div className="flex flex-row justify-end gap-4  ">
      <button className=" flex h-16 w-16 items-center justify-center border border-gray-800 text-center ">
        Logout
      </button>
      <button className="flex h-16 w-16 items-center justify-center border border-gray-800 text-center ">
        Profile
      </button>
    </div>
  );
};

{
  /* <ul>
  <>
    {data &&
      data.polls.map((poll: Poll, index: number) => (
        <li key={poll.id}>
          <ul className="flex flex-row gap-3">
            <li>poll nr {index}</li>
            <li>{poll.id}</li>
            <li>{poll.title}</li>
            <li>{poll.createdAt.toLocaleString()}</li>
          </ul>
        </li>
      ))}
  </>
</ul>; */
}
